# ユーザの権限を定義
enum Role {
  ADMIN
  USER
}

# UUIDスカラー型を利用するための定義
scalar UUID
# DateTimeスカラー型を利用するための定義
scalar DateTime
# 負でないスカラー型を利用するための定義
scalar NonNegativeInt
# 空でない文字列スカラー型を利用するための定義
scalar NonEmptyString

# ユーザのハンドル用の文字列スカラー型を利用するための定義
scalar HandleString
# ユーザのスクリーンネーム用の文字列スカラー型を利用するための定義
scalar ScreenNameString
# ユーザの自己紹介用の文字列スカラー型を利用するための定義
scalar BioString
# タイトル用の文字列スカラー型を利用するための定義
scalar TitleString
# 本文用の文字列スカラー型を利用するための定義
scalar BodyString

# authディレクティブを利用するための定義
directive @auth(role: Role! = USER) on FIELD_DEFINITION

# クエリのスキーマ定義
schema {
  query: Query
  mutation: Mutation
}

# クエリのスキーマ定義
type Query {
  # ユーザ一覧を取得するクエリ
  getAllUsers(offset: NonNegativeInt = 0, limit: NonNegativeInt = 10): [User!]! @auth(role: USER)

  # ユーザを取得するクエリ
  getUserByUUID(uuid: UUID!): User! @auth(role: USER)

  # 自分のユーザを取得するクエリ
  getMyUser: User! @auth(role: USER)

  # 投稿一覧を取得するクエリ
  getAllPosts(offset: NonNegativeInt = 0, limit: NonNegativeInt = 10): [Post!]! @auth(role: USER)

  # 投稿を取得するクエリ
  getPostByUUID(uuid: UUID!): Post! @auth(role: USER)
}

# ユーザをアップデートする際の入力型の定義
input UpdateUserInput {
  handle: HandleString
  screen_name: ScreenNameString
  bio: BioString
}

# 投稿をアップデートする際の入力型の定義
input UpdatePostInput {
  title: TitleString
  body: BodyString
}

# ミューテーションのスキーマ定義
type Mutation {
  # ユーザを更新するミューテーション 管理者用
  updateUserForAdmin(user_uuid: UUID!, handle: HandleString, screen_name: ScreenNameString, bio: BioString): User! @auth(role: ADMIN)

  # ユーザを削除するミューテーション 管理者用
  deleteUserForAdmin(user_uuid: UUID!): User! @auth(role: ADMIN)

  # 画像をアップロードするためのプリサインドURLを作成するミューテーション
  createPresignedURLForUploadImage: String! @auth(role: USER)

  # 自分のユーザの情報を更新するミューテーション
  updateMyUser(input: UpdateUserInput!): User! @auth(role: USER)

  # 自分のユーザを削除するミューテーション
  deleteMyUser: User! @auth(role: USER)

  # 投稿を作成するミューテーション
  createPost: Post! @auth(role: USER)

  # 投稿を更新するミューテーション
  updatePost(post_uuid: UUID!, input: UpdatePostInput!): Post! @auth(role: USER)

  # 投稿を削除するミューテーション
  deletePost(post_uuid: UUID!): Post! @auth(role: USER)
}

# ユーザ型の定義
# uuidがプライマリキーの役割を果たす
type User {
  user_uuid: UUID!
  handle: String!
  screen_name: String!
  bio: String!
  created_at: DateTime!
  updated_at: DateTime!
  role: Role!
  posts(offset: NonNegativeInt = 0, limit: NonNegativeInt = 10): [Post!]!
}

# 投稿型の定義
# uuidがプライマリキーの役割を果たす
# userとは1対多の関係
type Post {
  post_uuid: UUID!
  title: String!
  body: String!
  created_at: DateTime!
  updated_at: DateTime!
  is_public: Boolean!
  user: User!
}

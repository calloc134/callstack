version: "3.8"

# ネットワークの作成
networks:
  # 内部ネットワーク
  # バックエンドとlogtoコンテナのみ接続
  app-logto-network:
  # バックエンドとそれに対応するデータベースのみ接続
  app-db-network:
  # バックエンドとminioのみ接続
  app-minio-network:
  # logtoとそれに対応するデータベースのみ接続
  logto-db-network:
  # リバースプロキシで公開するネットワーク
  traefik-public:
    # リバースプロキシのネットワークを外部に公開
    external: true

# データベースのデータを格納するボリューム
volumes:
  # バックエンドのデータベースデータを格納するボリューム
  app-db-vol:
  # logtoのデータベースデータを格納するボリューム
  logto-db-vol:
  # minioのデータを格納するボリューム
  minio-data:

services:
  # バックエンド用のデータベース
  db-app:
    container_name: db-app
    # ポスグレの最新イメージを使用
    image: postgres:latest
    # ポスグレの環境変数を読み込む
    env_file: ${POSTGRES_ENV}
    # ポスグレのデータを格納するボリュームを指定
    volumes:
      - type: volume
        source: app-db-vol
        # ポスグレのデータを格納するボリュームのマウント先を指定
        target: /var/lib/postgresql/data
    # 内部ネットワークに接続
    networks:
      - app-db-network
    # コンテナが停止したら再起動
    restart: on-failure

  minio:
    # 画像ストレージ
    build:
      context: .
      dockerfile: packages/infra/Dockerfiles/Minio-Dockerfile
    restart: unless-stopped
    volumes:
      - type: volume
        source: minio-data
        target: /data
    # minioの環境変数を読み込む
    env_file: ${MINIO_ENV}
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    networks:
      - app-minio-network
      - traefik-public

  # logto用のデータベース
  db-logto:
    container_name: db-logto
    # ポスグレの最新イメージを使用
    image: postgres:latest
    # ポスグレの環境変数を読み込む
    env_file: ${POSTGRES_ENV}
    # ポスグレのデータを格納するボリュームを指定
    volumes:
      - type: volume
        source: logto-db-vol
        # ポスグレのデータを格納するボリュームのマウント先を指定
        target: /var/lib/postgresql/data
    # 内部ネットワークに接続
    networks:
      - logto-db-network
    # コンテナが停止したら再起動
    restart: on-failure

  # logtoコンテナ
  logto:
    image: svhd/logto:latest
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    env_file: ${LOGTO_ENV}
    environment:
      # logtoコンテナのエンドポイントを指定
      - ENDPOINT=${LOGTO_ENDPOINT}
      - ADMIN_ENDPOINT=${LOGTO_ADMIN_ENDPOINT}
    # 内部ネットワークに接続
    networks:
      - app-logto-network
      - logto-db-network
      - traefik-public

  backend:
    container_name: backend-prod
    # バックエンドのDockerfileを指定
    build:
      context: .
      dockerfile: packages/infra/Dockerfiles/Backend-Dockerfile
      args:
        # バックエンドのディレクトリを指定
        PACKAGE_PATH: ${BACKDIR}
        # ビルド時のスキーマのパスを指定
        SCHEMA_PATH: ${SCHEMA_PATH}
    # バックエンドの環境変数を読み込む
    env_file: ${BACK_ENV}
    # スキーマのパスを指定
    environment:
      # スキーマのパスを指定
      - SCHEMA_PATH=${SCHEMA_PATH}
      # バックエンドのminioのユーザー名とパスワードを指定
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      # バックエンドのminioのバケット名を指定
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      # logtoコンテナのエンドポイントを指定
      - LOGTO_ENDPOINT=${LOGTO_ENDPOINT}
      # オーディエンスを指定
      - LOGTO_AUDIENCE=${LOGTO_AUDIENCE}
      # logtoのwebhookシークレットを指定
      - LOGTO_WEBHOOK_SECRET=${LOGTO_WEBHOOK_SECRET}
      # NODE_ENVをproductionに指定
      - NODE_ENV=production
    # 内部ネットワークに接続
    networks:
      - app-logto-network
      - app-db-network
      - app-minio-network
      - traefik-public
    # コンテナが停止したら再起動
    restart: on-failure

  frontend:
    container_name: frontend-prod
    build:
      context: .
      # フロントエンドのDockerfileを指定
      dockerfile: packages/infra/Dockerfiles/Frontend-Dockerfile
      args:
        # vite側で必要な環境変数ここから
        # フロントエンドのディレクトリを指定
        PACKAGE_PATH: ${FRONTDIR}
        # ビルド時のスキーマのパスを指定
        SCHEMA_PATH: ${SCHEMA_PATH}
        # オペレーションの環境変数を指定
        # OPERATION_PATH: ${OPERATION_PATH}
        # logtoコンテナのエンドポイントを指定
        VITE_LOGTO_ENDPOINT: ${LOGTO_ENDPOINT}
        # logtoのアプリケーションIDを指定
        VITE_LOGTO_APPID: ${LOGTO_APPID}
        # logtoのアプリケーションIDを指定
        VITE_LOGTO_API_RESOURCE: ${LOGTO_API_RESOURCE}
        # viteとnginx両方で利用する環境変数ここから
        # ホスト名を指定
        VITE_HOSTNAME: ${HOSTNAME}
        # インフラの環境変数を指定
        INFRADIR: ${INFRADIR}
    networks:
      - traefik-public
    # コンテナが停止したら再起動
    restart: on-failure
    depends_on:
      - backend

  # リバースプロキシコンテナ
  traefik:
    container_name: traefik
    # traefikの最新イメージを使用
    image: traefik:latest
    # traefikの環境変数を読み込む
    labels:
      # TODO
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /etc/letsencrypt
        target: /etc/letsencrypt
    # traefikの設定ファイルを指定
    # ポートを指定
    ports:
      - "80:80"
      - "443:443"
    # ネットワークに接続
    networks:
      - traefik-public
    # コンテナが停止したら再起動
    restart: on-failure
